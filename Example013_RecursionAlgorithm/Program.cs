// нумерация элементов в таблице (и строки и столбцы) так же начинается с нуля
//string[,] table = new string[2, 5]; // Обращение к конкретному элементы будет выглядеть так (указываем нужный):
// table [0, 0] table [0, 1] table [0, 2] table [0, 3] table [0, 4] - 0 - индекс строки
// table [1, 0] table [1, 1] table [1, 2] table [1, 3] table [1, 4] - 1 - индекс столбца
// String.Empty - инициализация строк производится такой константой
// Чтобы обратиться к эл-ту массива, нужно указать название массива, затем в кв. скобках указать индекс строки и 
// индекс столбца. И далее работаем как с обычной переменной - после равно указываем, что хотим:
//table[1, 2] = "Слово";

// Чтобы распечатать данный массив, нам потребуется цикл в цикле:

// for (int rows = 0; rows < 2; rows++) // делаем цикл для строк со счётчиком rows
// {
//     for (int columns = 0; columns < 5; columns++) // в нём делаем вложенный (внутр-ий) цикл для столбцов со счётчиком columns
//     {
//         Console.WriteLine($"-{table[rows, columns]}-"); // тут делаем печать элементов массива посредством интерполяцию, 
//         //обращаясь к элементам массива через имя массива, далее в кв. скобках указывая индекс строки и индекс столбца.
//     }
// }

// Теперь сделаем то же самое для массива с числами:

// int[,] matrix = new int[3, 4];

// for (int i = 0; i < matrix.GetLength(0); i++) // при работе с матрицами вместо указания "i<3" добавляем конструкцию 
// {
//     for (int j = 0; j < matrix.GetLength(1); j++)
//     {
//         Console.Write($"{matrix[i, j]} "); // убираем .Line, чтобы не было перехода на новую строку 
//     }
// Console.WriteLine(); // принудительно ставим переход на новую строку после каждого прохода по вложенному циклу
// }


// Теперь напишем методы для заполнения и для печати такой двухмерной матрицы:

// void PrintArray(int[,] matr) // метод вывода матрицы на экран
// {
//     for (int i = 0; i < matr.GetLength(0); i++)
//     {
//         for (int j = 0; j < matr.GetLength(1); j++)
//         {
//             Console.Write($"{matr[i, j]} ");
//         }
//         Console.WriteLine();
//     }
// }

// void FillArray(int[,] matr) // метод заполнения матрицы случайными числами
// {
//     for (int i = 0; i < matr.GetLength(0); i++)
//     {
//         for (int j = 0; j < matr.GetLength(1); j++)
//         {
//             matr[i, j] = new Random().Next(1, 10); // [1,10); заполняем массив, используюя псевдогенератор случайных чисел
//         }
//     }
// }

// int[,] matrix = new int[3, 4];
// PrintArray(matrix);
// FillArray(matrix);
// Console.WriteLine();
// PrintArray(matrix);

// Теперь возмём картинку и закрасим внутреннюю область периметра:

// int[,] pic = new int[,] // необязательно указывать кол-во строк и столбцов, если есть фиксированные данные
// {
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
//     {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
//     {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
//     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
// };

// void PrintImage(int[,] image) // метод вывода матрицы на экран
// {
//     for (int i = 0; i < image.GetLength(0); i++)
//     {
//         for (int j = 0; j < image.GetLength(1); j++)
//         {
//             if (image[i, j] == 0) Console.Write(" ");
//             else Console.Write("+");
//         }
//         Console.WriteLine();
//     }
// }

// void FillImage(int row, int col)
// {
//     if (pic[row, col] == 0)
//     {
//         pic[row, col] = 1;
//         FillImage(row - 1, col);
//         FillImage(row, col - 1);
//         FillImage(row + 1, col);
//         FillImage(row, col + 1);
//     }
// }

// PrintImage(pic);
// FillImage(13,13); // указываем случайную точку внутри области, которую нам надо закрасить
// PrintImage(pic);


// РЕКУРСИЯ - это функция, которая вызывает саму себя!
// Самый простой пример рекурсии:

// double Factorial(int n) // double, т.к. оно больше значений в себя включает
// {
//     if (n == 1) return 1; // 1! = 0; 0! = 1
//     else return n * Factorial(n - 1);
// }
// for (int i = 1; i < 40; i++)
// {
//     Console.WriteLine($"{i}! = {Factorial(i)}");
// }


// Пример - запишем код для цифр фибоначчи
// f(1)=1
// f(2)=1
// f(n)=f(n-1)+f(n-2)

double Fibonacci(int n)
{
    if (n == 1 || n == 2) return 1;
    else return (Fibonacci(n - 1) + Fibonacci(n - 2));
}

for (int i = 1; i < 50; i++)
{
    Console.WriteLine($"f{i} = {Fibonacci(i)}");
}


