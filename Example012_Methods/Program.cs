// Вид методов 1 - ничего не принимают и ничего не возвращают (нет оператов и переменных)
// void Method1()
// {
//     Console.WriteLine("Автор ФИО"); // например, вы хотите просто указывать своё авторство.
// тут тело метода может просто что-то показывать (отображать) на экране
// }
// Method1(); // вызов метода именно со скобками! Указываем идентификатор метода и круглые скобки.


// Вид методов 2 - это методы, которые ничего не возвращают, но могут принимать какие-то аргументы.
// void Method2(string msg)
// {
//     Console.WriteLine(msg); //указываем оператор и принятый аргумент(или агрументы)
// }
// Method2("Текст сообщения"); // вызываем метод с текстом сообщения - просто вызов метода
// аргументы могут быть именноваными - когда явно указано, какое значение мы хотим какому аргументы указать:
// Method2(msg: "Текст сообщения"); // это нужно, когда аргументов >1

// void Method21(string msg, int count)
// {
//     int i = 0;
//     while (i < count)
//     {
//         Console.WriteLine(msg);
//         i++; // увеличение счетчика на единицу - это ИНКРИМЕНТ. А уменьшение - ДЕКРИМЕНТ
//     }
// }
// // // Method21("Текст", 4);
// Method21(msg: "Текст", count: 4); // через такую конструкцию можно ЯВНО указать значение каждого аргумента.
// в этом случае именованные аргументы НЕ обязательно писать по порядку.

// !!! ЕСЛИ случилось зацикливание программы, то это можно исправить комбинацией Ctrl+C


// Вид методов 3 - это методы ничего не принимают, НО что-то возвращают

// int Method3() // метод не принимает никакие аргументы
// {
//     return DateTime.Now.Year;
// }
// // int year = Method3(); // через идентификатор присваивания даём имя новой переменной, в которую кладём полученное значение
// Console.WriteLine(year);


// Вид методов 4 - это методы, которые что-то принимают и что-то возвращают.
// string Method4(int count, string text)
// {
//     int i = 0;
//     string result = String.Empty; // изначальный результат - пустая строка.
//     while(i<count)
//     {
//         result = result + text;
//         i++;
//     }
//     return result;
// }
// string res = Method4(10, "A");
// Console.WriteLine(res);

// Перезапишем пример по 4му типу методов, используя цикл for - он инизиализирует счетчик, 
// проверяет условие, прописывается инкримент (увеличение счётчика):

// string Method4(int count, string text)
// {
//     string result = String.Empty; // изначальный результат - пустая строка.
//     for (int i = 0; i < count; i++)
//     {
//         result = result + text;
//     }
//     return result;
// }
// string res = Method4(10, "A");
// Console.WriteLine(res);


// ~~~ ИСПОЛЬЗОВАНИЕ ЦИКЛА В ЦИКЛЕ ~~~
// Пример - выведение таблицы умножения на экран:

// for (int i = 2; i <= 10; i++)
// {
//     for (int j = 2; j <= 10; j++)
//     {
//         Console.WriteLine($"{i} x {j} = {i*j}");
//     }
//     Console.WriteLine(); // добавляется пустая строка после прохождения каждого блока цикла
// }


// ЗАДАЧА-ПРИМЕР
// Дан текст. В тексте нужно все пробелы заменить чёрточками,
// строчные буквы "к" заменить заглавными "К",
// а заглавные "С" заменить на строчные "с".

// string text = "— Я думаю, — сказал князь, улыбаясь, — что,"
//             + "ежели бы вас послали вместо нашего милого Винценгероде,"
//             + "вы бы взяли приступом согласие прусского короля."
//             + "Вы так красноречивы. Вы дадите мне чаю?";

// string s = "qwerty" - если надо обратиться к конкретному символу строки, то это делается отсчетом по порядку с нуля:
//             012345  - нумерация символов также начинается с нуля!
// s[3] - так мы обращаемся к элементу строки с идентификатором s и под номером 3 (это буква r)

// string Replace(string text, char oldValue, char newValue)
// {
//     string result = String.Empty; // - 1. первым делом заводим новую строку - это инициализация пустой строки

//     int length = text.Length; // 3. получаем длину нашей строки - 
//                             //для этого обращаемся к соответствующему свойству .Length (показывает кол-во символов в строке)
//     for (int i = 0; i < length; i++) // 4. с помощью циклаа for мы пробегаемся от нулевого символа до указанного в length, 
//                                     //выполняя следующее действие:
//     {
//         if(text[i]==oldValue) result = result + $"{newValue}"; // если итый эл-т строки совпал с заданным значением, то менаем его на указанный
//         else result = result + $"{text[i]}"; // если совпадений не обнаружено, то оставляем текущий символ без изменений
//     }
//     return result; // 2. потом сразу выводим этот результат, чтобы не забыть
// }
// string newText = Replace(text, ' ', '-'); // вписываем теперь конретно где и что на что заменить (в скобках - пробелы на тире)

// Console.WriteLine(newText);
// Console.WriteLine();
// newText = Replace(newText, 'к', 'К');
// Console.WriteLine(newText);
// newText = Replace(newText, 'С', 'с');
// Console.WriteLine(newText);


// ЗАДАЧА - отсортировать массив от минимального к максимальному элементу по порядку, чтобы:
// Было: 1 8 3 2 6 4 5 7
// Стало: 1 2 3 8 6 4 5 7
// Как решаем:
// 1. Найти позицию минимального элемента в неотсортированной части массива.
// 2. Произвести обмен этого значения со значением первой неотсортированной позиции.
// 3. Повторять пока есть неотсортированные элементы.

int[] arr = { 1, 5, 4, 3, 2, 6, 7, 1, 1 }; // 1. инициализиуем массив

void PrintArray(int[] array) // 2. Пишем метод вывода массива
{
    int count = array.Length; // 3. Определеляем длину массива - кол-во элементов

    for (int i = 0; i < count; i++) // 4. Вводим цикл, в котором мы пробегаем по всем элементам нашего массива
    {
        Console.Write($"{array[i]} "); // 5. и показываем на экране результат в одну строку
    }
    Console.WriteLine(); // 6. Выводим пустую строчку после вывода массива
}

void SelectionSort(int[] array) // 8. Теперь пишем метод, который упорядочивает наш массив
{
    for (int i = 0; i < array.Length - 1; i++) // 9. Добавляем обращение к длине массива через array.Length 
                                               // 16. Добавляем искусственно -1 к длине, т.к. в п. 14 прибавили 1, 
                                               //чтобы не возвращаться к предыдущему элементу.
    {
        int minPosition = i; // 10. Теперь определеяем ту позицию, на которую смотрим. 
                             //И запоминаем ту позицию рабочего элемента (а именно - i), 
                             //для которой мы в дальнейшем будем производить какие-то действия.
        for (int j = i + 1; j < array.Length; j++) // 14. Теперь прописывам блок кода, 
                                                   //который будет искать минимальный элемент.
        {
            if (array[j] < array[minPosition]) minPosition = j; // 15. сравниваем, является ли элемент минимальным
        }


        int temporary = array[i]; // 11. После выполнения некого блока кода между 10 и 11, 
                                  //нам необходимо будет поменять позиции с той позицией, которую мы нашли
        array[i] = array[minPosition]; // 12. в итую позицию (i) мы должны будем положить тот элемент, 
                                       //который будет найден в процессе ПОКА не написанного ксочка кода (между 10 и 11).
                                       // Т.е. это простой обмен двух переменных местами.
        array[minPosition] = temporary; // 13. И в minPosition мы кладём элемент, который был временным.
    }
}

PrintArray(arr); // 7. Сразу протестируем работу метода PrintArray
SelectionSort(arr); // 17. 
PrintArray(arr); // 18.



